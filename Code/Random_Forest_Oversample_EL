#Random Forest with oversampling of minority class

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import math
import warnings
warnings.filterwarnings("ignore")
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import recall_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn import preprocessing
from sklearn import tree
import seaborn as sns
from imblearn.over_sampling import SMOTE
import collections, numpy

url = 'https://github.com/JichongWu/Final-Project-Group8/blob/main/Data/project_04142021_J.Pai.csv?raw=true'
project = pd.read_csv(url, encoding='ISO-8859-1')

# Convert string labels of WEATHER_GROUP into numbers
le = preprocessing.LabelEncoder()
weather_encoded = le.fit_transform(project['WEATHER_GROUP'])

# Convert string labels of LIGHT_GROUP into numbers
le = preprocessing.LabelEncoder()
light_encoded = le.fit_transform(project['LIGHT_GROUP'])

# Convert string labels of SURFACE_GROUP into numbers
le = preprocessing.LabelEncoder()
surface_encoded = le.fit_transform(project['SURFACE_GROUP'])

# Convert string labels of GRADE_GROUP into numbers
le = preprocessing.LabelEncoder()
grade_encoded = le.fit_transform(project['GRADE_GROUP'])

# Convert string labels of VEHICLE_TYPE into numbers
le = preprocessing.LabelEncoder()
vehicle_encoded = le.fit_transform(project['VEHICLE_TYPE'])

# Convert string labels of ALIGN_GROUP into numbers
le = preprocessing.LabelEncoder()
align_encoded = le.fit_transform(project['ALIGN_GROUP'])

# Convert string labels of MY_GROUP into numbers
le = preprocessing.LabelEncoder()
model_year_encoded = le.fit_transform(project['MY_GROUP'])

# Convert string labels of GENDER into numbers
le = preprocessing.LabelEncoder()
gender_encoded = le.fit_transform(project['GENDER_GROUP'])

# Convert string labels of AGE_GROUP into numbers
column = 'AGE'
age_normal = (project[column] - project[column].min()) / (project[column].max() - project[column].min())

X=list(zip(weather_encoded, light_encoded, surface_encoded, grade_encoded, vehicle_encoded, align_encoded, model_year_encoded,
          gender_encoded,age_normal))
print(X)
X_names = ['weather_encoded', 'light_encoded', 'surface_encoded', 'grade_encoded', 'vehicle_encoded', 'align_encoded', 'model_year_encoded',
          'gender_encoded','age_normal']

le = preprocessing.LabelEncoder()
y = le.fit_transform(project['ROLL'])
print(y)

from sklearn.model_selection import train_test_split
training_features, test_features, training_target, test_target = train_test_split(X, y, test_size = 0.3, random_state=12)

#print(test_target)
#print(test_features)
#print(training_features)
#print(training_target)

x_train, x_val, y_train, y_val = train_test_split(training_features, training_target,
                                                  test_size = .3,
                                                  random_state=12)
sm = SMOTE(random_state=12, sampling_strategy = 1.0)
x_train_res, y_train_res = sm.fit_sample(training_features, training_target)
#print (collections.Counter(y_train), np.bincount(y_res))

clf_rf = RandomForestClassifier(n_estimators=100, random_state=12)
clf_rf.fit(x_train_res, y_train_res)

##Results of Random Forest w/ oversampling of minority class###

print ('Validation Results')
print (clf_rf.score(x_val, y_val))
print (recall_score(y_val, clf_rf.predict(x_val)))
print ('\nTest Results')
print (clf_rf.score(test_features, test_target))
print (recall_score(test_target, clf_rf.predict(test_features)))

#Plot of Feature importance### 

clf_rf = RandomForestClassifier(n_estimators=100, random_state=12)
clf_rf.fit(x_train_res, y_train_res)
for name, importance in zip(X_names, clf_rf.feature_importances_):
    print(name, "=", importance)

features = X_names
importances = clf_rf.feature_importances_
indices = np.argsort(importances)

plt.title('Feature Importances')
plt.barh(range(len(indices)), importances[indices], color='b', align='center')
plt.yticks(range(len(indices)), [features[i] for i in indices])
plt.xlabel('Relative Importance')
plt.savefig('Relative Importance_rf.png')
plt.tight_layout()
plt.show()
